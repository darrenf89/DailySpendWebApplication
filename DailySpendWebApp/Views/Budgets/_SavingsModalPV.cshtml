@model DailySpendBudgetWebApp.Models.CreateABudgetPageModel

@{
    string? GoalString = "";
    string? GoalDateString = "";
    string? CurrentBalanceString = "";
    string? RegularSavingString = "";
    string? CanExceedString = "true";
    string? isAutoCompleteString = "true";
    if (Model.Stage.Contains("EditSaving"))
    {
        GoalString = String.Format("{0:c}", Model.SavingsGoal);
        DateTime dt = Model.GoalDate.GetValueOrDefault();
        GoalDateString = dt.ToString("yyyy-MM-dd");
        CurrentBalanceString = String.Format("{0:c}", Model.CurrentBalance);
        RegularSavingString = String.Format("{0:c}", Model.RegularSavingValue);

        if(Model.canExceedGoal)
        {
            CanExceedString = "true";
        }
        else
        {
            CanExceedString = "false";
        }
        if (Model.isAutoComplete)
        {
            isAutoCompleteString = "true";
        }
        else
        {
            isAutoCompleteString = "false";
        }
    }
}


<div class="container">
    <div id="divIsRegularSavingSelector" class="card text-white bg-white mb-3 shadow rounded-5 ms-3 me-3 border-dark">
        <div>
            <h5 class="text-dark p-2 text-center">Do you want to set up a Regular Saving?</h5>
            <p class="text-muted text-center pb-3 ps-2 pe-2 m-0" style="font-size: 8pt;">Let us do the work for you. Set up a Saving goal and we will figure everything else out, well apart from what you should wear!</p>
        </div>
        <div class="container d-flex flex-column mb-1 ps-3 pe-3" id="divIsRegularSaving">
            <div class="d-flex justify-content-between align-items-center text-center ms-3 me-3">
                <div id="divRegularSavingYes" class="col-4 m-2">
                    <button id="btnYes" type="button" class="btn btn-primary rounded-3 col-12" onclick="isRegularSavingSelection('Yes'), false;">Ongoing</button>
                </div>
                <div id="divRegularSavingYes" class="col-4 m-2">
                    <button id="btnNo" type="button" class="btn btn-dark rounded-3 col-12" onclick="isRegularSavingSelection('No'), false;">Envelope</button>
                </div>
                <input type="hidden" asp-for="isRegularSaving" />
                <input type="hidden" asp-for="SavingID" />
            </div>
        </div>
    </div>
    <div class="card text-white bg-white mb-3 shadow rounded-5 ms-3 me-3 border-dark" id="divSavingsTypeSelector" style="display: none;">
        <div class="container mt-1 mb-1">
            <div class="d-flex flex-column align-items-center">
                <div class="input-container col-7 mb-0">
                    <input style="font-size: 20px; cursor: pointer;" placeholder="Name" onfocus="this.placeholder = ''" onblur="this.placeholder = 'Savings Category'" asp-for="SavingsName" type="text" />
                </div>
                <div class="text-center p-1 pt-2" style="line-height: 11px">
                    <span style="font: normal 10px Arial;" class="text-danger" asp-validation-for="SavingsName"></span>
                </div>
            </div>
        </div>
        <div id="divCategoryExp" class="text-muted text-center p-1" Style="font-size: 12px;"></div>
        <div class="container d-flex flex-column mb-1 ps-3 pe-3">
            <div class="Saving-Type-Toggle" id="divSavingDetails">
                <div class="d-flex justify-content-center align-items-center text-center">
                    <div class="col-4 justify-content-center" id="divTargetDate">
                        <input type="radio" id="rdbTargetDate" name="SavingTypeToggleOption" value="TargetDate" />
                        <label style="font-size:8pt" for="rdbTargetDate" class="lblSavingTypeToggleOption">
                            <strong>Target Date</strong>
                        </label>
                    </div>
                    <div class="col-4 justify-content-center text-dark" id="divSavingsBuilder">
                        <input type="radio" id="rdbSavingsBuilder" name="SavingTypeToggleOption" value="SavingsBuilder" />
                        <label style="font-size:8pt" for="rdbSavingsBuilder" class="lblSavingTypeToggleOption">
                            <strong>Savings Builder</strong>
                        </label>
                    </div>
                    <div class="col-4 justify-content-center" id="divTargetAmount">
                        <input type="radio" id="rdbTargetAmount" name="SavingTypeToggleOption" value="TargetAmount" />
                        <label style="font-size:8pt" for="rdbTargetAmount" class="lblSavingTypeToggleOption">
                            <strong>Target Amount</strong>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <input type="hidden" asp-for="SavingsType" />
        <span class="text-danger ps-4 pe-4 pb-3" asp-validation-for="SavingsType"></span>
    </div>

    <div class="card text-white bg-white mb-3 shadow rounded-5 ms-3 me-3 border-dark" id="SavingsDetails" style="display: none;">
        <div id="divSpacerTop2" class="mt-4"></div>
        <div id="divSavingTarget" class="row justify-content-between align-items-center ms-2 me-2 mt-0">
            <label class="form-label col-5 ps-2 pe-1 m-0 text-dark" asp-for="SavingsGoal"></label>
            <input id="txtSavingsGoal" type="text" pattern="^£\d{1,3}(,\d{3})*(\.\d+)" value="" style="cursor: pointer; border-left: 1px solid #772953; width: 42%;" data-type="currency" placeholder="£0.00" class="pe-2 pt-2 pb-2" onfocus="this.placeholder = '';" onblur="this.placeholder = '£0.00'" onchange="UpdateHdnSavingGoal();" />
            <input asp-for="SavingsGoal" type="hidden" />
            <span class="text-danger" asp-validation-for="SavingsGoal"></span>
        </div>
        <div id="divCurrentBalance" class="row justify-content-between align-items-center ms-2 me-2 mt-2">
            <label class="form-label col-5 ps-2 pe-1 m-0 text-dark" asp-for="CurrentBalance"></label>
            <input id="txtCurrentBalance" type="text" pattern="^£\d{1,3}(,\d{3})*(\.\d+)" style="cursor: pointer; border-left: 1px solid #772953; width: 42%;" value="" data-type="currency" placeholder="£0.00" class="pe-2 pt-2 pb-2" onfocus="this.placeholder = '';" onchange="UpdateHdnCurrentBalance();" onblur="this.placeholder = '£0.00';" />
            <input asp-for="CurrentBalance" type="hidden" />
            <span class="text-danger" asp-validation-for="CurrentBalance"></span>
        </div>
        <div id="divGoalDate" class="row justify-content-between align-items-center ms-2 me-2 mt-2">
            <label class="form-label col-5 ps-2 pt-2 pe-1 pb-2 m-0 text-dark" asp-for="GoalDate">Goal Date</label>
            <input asp-for="GoalDate" id="GoalDate" type="date" onblur="CheckDateFutureSavings(), UpdateValues(), false;" class="pe-2 pt-2 pb-2" style="width: 42%; text-align: right; border: none; outline: none; color: #772953; cursor: pointer; border-left: 1px solid #772953;" oninput="this.style.color = '#e95420'" />
            <span class="text-danger" asp-validation-for="GoalDate" id="valGoalDate"></span>
        </div>
        <div id="divSavingValue" class="row justify-content-between align-items-center ms-2 me-2 mt-2 text-dark">
            <label class="form-label col-4 ps-2 pe-1 m-0" asp-for="RegularSavingValue"></label>
            <div style="width: 65%; border-left: 1px solid #772953; " class="d-flex text-dark justify-content-between ps-1 pe-1">
                <input id="txtRegularSavingValue" type="text" pattern="^£\d{1,3}(,\d{3})*(\.\d+)" style=" color: #38b44a; width: 40%; text-align: right; border: none; outline: none; cursor: pointer;" value="" data-type="currency" placeholder="£0.00" class="pe-2 pt-2 pb-2" onfocus="this.placeholder = ''" onblur="this.placeholder = '£0.00'" onchange="UpdateHdnSavingAmount();" />
                <input asp-for="RegularSavingValue" type="hidden" />
                <div class="d-flex text-dark align-items-center" style="width: 55%">
                    <select asp-for="ddlSavingsPeriod" class="form-select form-select-sm" onchange="UpdateHdnSavingAmount()">
                        <option value="PerDay">Every Day</option>
                        <option value="PerPayPeriod">Pay Day</option>
                    </select>
                </div>
            </div>
            <span class="text-danger" asp-validation-for="RegularSavingValue"></span>
        </div>
        <div id="divSpacerTop" class="mt-4"></div>
        <div id="divCanExceedGoal" class="row justify-content-between align-items-center ms-2 me-2 mt-0">
            <input asp-for="canExceedGoal" id="canExceedGoal" type="checkbox" class="pe-4 pt-1 pb-1" style="width: 15%; border: none; outline: none; color: #772953; cursor: pointer;" />
            <label style="font-size: 8pt;" class="form-label col-10 ps-1 pt-1 pb-1 m-0 text-dark text-end" asp-for="GoalDate">Don't allow Goal Value to be exceeded?</label>
            <span class="text-danger" asp-validation-for="canExceedGoal"></span>
        </div>
        <div id="divIsAutoComplete" class="row justify-content-between align-items-center ms-2 me-2 mt-0 mb-0">
            <input asp-for="isAutoComplete" id="isAutoComplete" type="checkbox" class="pe-4 pt-1 pb-1" style="width: 15%; border: none; outline: none; color: #772953; cursor: pointer;" />
            <label style="font-size: 8pt;" class="form-label col-10 ps-1 pt-1 pb-1 m-0 text-dark text-end" asp-for="isAutoComplete">Complete and close Savings when Goal Reached?</label>
            <span class="text-danger" asp-validation-for="isAutoComplete"></span>
        </div>
        <div id="divSpacerBottom" class="mb-3"></div>
    </div>
</div>

<script>

    var SavingModalStage = [];

    document.addEventListener("load", CheckSavingStage());

    function CheckSavingStage() 
    {
        SavingModalStage = [];
        @foreach (string item in Model.Stage)
        {
            @:SavingModalStage.push('@item');
        }

        if (SavingModalStage.includes('EditSaving')) 
        {
            document.getElementById('SavingsName').readOnly = true;
            if ('@Model.isRegularSaving' == 'True') 
            {           
                LoadRegularSavingYes()
                document.getElementById('SavingsDetails').style.display = 'block';
                ClearSavingsInputs();
                HideValidationMessages();
                if ('@Model.SavingsType' == 'TargetDate') 
                {                
                    LoadSavingTypeTargetDate()
                    document.getElementById('txtSavingsGoal').value = '@Html.Raw(GoalString)'
                    document.getElementById('GoalDate').value = '@Html.Raw(GoalDateString)'
                    document.getElementById('txtCurrentBalance').value = '@Html.Raw(CurrentBalanceString)'
                    document.getElementById('txtRegularSavingValue').value = '@Html.Raw(RegularSavingString)'
                    document.getElementById('isAutoComplete').checked = @isAutoCompleteString
                }
                else if ('@Model.SavingsType' == 'SavingsBuilder') 
                {
                    LoadSavingTypeSavingsBuilder()
                    document.getElementById('txtSavingsGoal').value = '@Html.Raw(GoalString)'
                    document.getElementById('txtRegularSavingValue').value = '@Html.Raw(RegularSavingString)'
                }
                else if ('@Model.SavingsType' == 'TargetAmount') 
                {
                    LoadSavingTypeTargetAmount()
                    document.getElementById('txtSavingsGoal').value = '@Html.Raw(GoalString)'
                    document.getElementById('GoalDate').value = '@Html.Raw(GoalDateString)'
                    document.getElementById('txtCurrentBalance').value = '@Html.Raw(CurrentBalanceString)'
                    document.getElementById('txtRegularSavingValue').value = '@Html.Raw(RegularSavingString)'
                    document.getElementById('isAutoComplete').checked = @isAutoCompleteString
                    document.getElementById('canExceedGoal').checked = @CanExceedString
                }
            }
            else 
            {
                LoadRegularSavingNo()
                document.getElementById('txtSavingsGoal').value = '@Html.Raw(GoalString)'
                document.getElementById('txtCurrentBalance').value = '@Html.Raw(CurrentBalanceString)'
            }
        }
    }


    $("input[data-type='currency']").on({
        keyup: function () {
            formatCurrency($(this));
        },
        blur: function () {
            formatCurrency($(this), "blur");
        }
    });

    function UpdateHdnSavingGoal() {
        var txtSavingsGoal = document.getElementById('txtSavingsGoal').value;
        var numSavingsGoal = txtSavingsGoal.replace('£', '').replace(',', '');
        document.getElementById('SavingsGoal').value = numSavingsGoal;
    }

    function UpdateHdnCurrentBalance() {
        var txtSavingsGoal = document.getElementById('txtCurrentBalance').value;
        var numSavingsGoal = txtSavingsGoal.replace('£', '').replace(',', '');
        document.getElementById('CurrentBalance').value = numSavingsGoal;
    }

    function CheckErrorPageStatus(Status) {
        if (Status == "Savings Name Error Regular") {
            LoadRegularSavingYes();
        }
        else if (Status == "Savings Name Error NotRegular") {
            LoadRegularSavingNo();
        }
    }

    function LoadRegularSavingNo() {
        document.getElementById('divIsRegularSavingSelector').style.display = 'none';
        document.getElementById('divSavingDetails').style.display = 'none';
        document.getElementById('divSavingsTypeSelector').style.display = 'flex';
        document.getElementById('divCategoryExp').style.display = 'none';
        document.getElementById('SavingsDetails').style.display = 'block';
        //document.getElementById('btnSubmit').style.display = 'block';
        document.getElementById('isRegularSaving').value = 'False';
        document.getElementById('divSavingTarget').style.display = 'none';
        document.getElementById('divCurrentBalance').style.display = 'flex';
        document.getElementById('divGoalDate').style.display = 'none';
        document.getElementById('divSavingValue').style.display = 'flex';
        document.getElementById('ddlSavingsPeriod').value = 'PerPayPeriod'
        document.getElementById('ddlSavingsPeriod').selectedIndex = 1
        document.getElementById('ddlSavingsPeriod').disabled = true;
        document.getElementById('divCanExceedGoal').style.display = 'none';
        document.getElementById('divIsAutoComplete').style.display = 'none';
        document.getElementById('divCategoryExp').innerHTML = '<p style="font-size: 10px" class="pb-1 ps-2 pe-2 m-0">Envelope Saving allows you to set aside money after youve been paid to spend during the month</p><p style="font-size: 10px" class="pb-1 ps-2 pe-2 m-0">Maybe its for groceries, or money for going out! Using Envelopes will help you better control your spending!</p>'
        document.getElementById('divCategoryExp').style.display = 'block';

    }

    function LoadRegularSavingYes() {
        document.getElementById('divIsRegularSavingSelector').style.display = 'none';
        document.getElementById('divSavingsTypeSelector').style.display = 'flex';
        document.getElementById('SavingsDetails').style.display = 'none';
        //document.getElementById('btnSubmit').style.display = 'block';
        document.getElementById('isRegularSaving').value = 'True';
        document.getElementById('divSavingDetails').style.display = 'block';
    }

    function LoadSavingTypeTargetDate() {
        document.getElementById('SavingsType').value = 'TargetDate';
        document.getElementById('divTargetDate').style.backgroundColor = '#e95420';
        document.getElementById('divSavingsBuilder').style.backgroundColor = '#fff';
        document.getElementById('divTargetAmount').style.backgroundColor = '#fff';
        document.getElementById('divSavingTarget').style.display = 'flex';
        document.getElementById('divCurrentBalance').style.display = 'flex';
        document.getElementById('divGoalDate').style.display = 'flex';
        document.getElementById('divSavingValue').style.display = 'flex';
        document.getElementById('divCanExceedGoal').style.display = 'none';
        document.getElementById('divIsAutoComplete').style.display = 'flex';
        document.getElementById('txtRegularSavingValue').disabled = true;
        document.getElementById('GoalDate').readOnly = false;
        document.getElementById('GoalDate').style.color = "#333";
        document.getElementById('ddlSavingsPeriod').value = 'PerDay'
        document.getElementById('ddlSavingsPeriod').disabled = true;
        document.getElementById('divCategoryExp').innerHTML = '<p style="font-size: 10px" class="pb-1 ps-2 pe-2 m-0">For holidays, your wedding ...</p><p style="font-size: 10px" class="pb-1 ps-2 pe-2 m-0">Figure out how much you need to contribute each day to meet a goal with a deadline</p>'
    }

    function LoadSavingTypeSavingsBuilder() {
        document.getElementById('SavingsType').value = 'SavingsBuilder';
        document.getElementById('divTargetDate').style.backgroundColor = '#fff';
        document.getElementById('divSavingsBuilder').style.backgroundColor = '#e95420';
        document.getElementById('divTargetAmount').style.backgroundColor = '#fff';
        document.getElementById('divSavingTarget').style.display = 'none';
        document.getElementById('divCurrentBalance').style.display = 'flex';
        document.getElementById('divGoalDate').style.display = 'none';
        document.getElementById('divSavingValue').style.display = 'flex';
        document.getElementById('divCanExceedGoal').style.display = 'none';
        document.getElementById('divIsAutoComplete').style.display = 'none';
        document.getElementById('txtRegularSavingValue').disabled = false;
        document.getElementById('GoalDate').readOnly = false;
        document.getElementById('GoalDate').style.color = "#333";
        document.getElementById('ddlSavingsPeriod').disabled = false;
        document.getElementById('divCategoryExp').innerHTML = '<p style="font-size: 10px" class="pb-1 ps-2 pe-2 m-0">For saving goals without any time or target constraints</p><p style="font-size: 10px" class="pb-1 ps-2 pe-2 m-0">Save the same amount each period, as much as you can afford!</p>'

    }

    function LoadSavingTypeTargetAmount() {
        document.getElementById('SavingsType').value = 'TargetAmount';
        document.getElementById('divTargetDate').style.backgroundColor = '#fff';
        document.getElementById('divSavingsBuilder').style.backgroundColor = '#fff';
        document.getElementById('divTargetAmount').style.backgroundColor = '#e95420';
        document.getElementById('divSavingTarget').style.display = 'flex';
        document.getElementById('divCurrentBalance').style.display = 'flex';
        document.getElementById('divGoalDate').style.display = 'flex';
        document.getElementById('divSavingValue').style.display = 'flex';
        document.getElementById('divCanExceedGoal').style.display = 'flex';
        document.getElementById('divIsAutoComplete').style.display = 'flex';
        document.getElementById('txtRegularSavingValue').disabled = false;
        document.getElementById('GoalDate').readOnly = true;
        document.getElementById('GoalDate').style.color = "#c0c0c0";
        document.getElementById('ddlSavingsPeriod').disabled = false;
        document.getElementById('divCategoryExp').innerHTML = '<p style="font-size: 10px" class="pb-1 ps-2 pe-2 m-0">For emergency fund, downpayment ...</p><p style="font-size: 10px" class="pb-1 ps-2 pe-2 m-0">Save towards a target over time, contribute as much as you can each period</p>'

    }

    document.querySelectorAll('input[name="SavingTypeToggleOption"]').forEach(radio => {
        radio.addEventListener('click', HandleSavingTypeRadioClick);
    });

    document.getElementById("txtSavingsGoal").addEventListener('change', UpdateValues, false);
    document.getElementById("txtCurrentBalance").addEventListener('change', UpdateValues, false);
    document.getElementById("txtRegularSavingValue").addEventListener('change', UpdateValues, false);
    document.getElementById('ddlSavingsPeriod').addEventListener('change', UpdateValues, false);

    function isRegularSavingSelection(isRegular) {
        if (isRegular == 'Yes') {
            LoadRegularSavingYes();
        }
        else if (isRegular == 'No') {
            LoadRegularSavingNo();
        }
    }

    function HandleSavingTypeRadioClick() {
        document.getElementById('SavingsDetails').style.display = 'block';
        ClearSavingsInputs();
        HideValidationMessages();
        if (document.getElementById('rdbTargetDate').checked) {
            LoadSavingTypeTargetDate();            
        }
        else if (document.getElementById('rdbSavingsBuilder').checked) {
            LoadSavingTypeSavingsBuilder();
        }
        else if (document.getElementById('rdbTargetAmount').checked) {
            LoadSavingTypeTargetAmount();
        }
    }

    function UpdateValues() {
        //console.log('UpdatingValues');
        if (document.getElementById('SavingsType').value == 'TargetDate') {
            //console.log('TargetDate');
            UpdateSavingsValue();
        }
        else if (document.getElementById('SavingsType').value == 'TargetAmount') {
            //console.log('TargetAmount');
            UpdateGoalDate();
        }
    }

    function UpdateSavingsValue() {
        if (document.getElementById('txtSavingsGoal').value == '' || document.getElementById('txtCurrentBalance').value == '' || document.getElementById('hdnServerDate').value == '' || document.getElementById('GoalDate').value == '') {

            document.getElementById('txtRegularSavingValue').value = '';
        }
        else {
            var SpendPerDay = CalculateSavingsValue();
            document.getElementById('txtRegularSavingValue').value = '£' + SpendPerDay;
            document.getElementById('RegularSavingValue').value = SpendPerDay;
        }

    }

    function CalculateSavingsValue() {
        var SavingGoal = Number((document.getElementById('txtSavingsGoal').value).replace(/[^0-9.-]+/g, ""));
        var CurrentSavings = Number((document.getElementById('txtCurrentBalance').value).replace(/[^0-9.-]+/g, ""));
        var CurrentDateString = (document.getElementById('hdnServerDate').value);
        var CurrentDateStringSplit = CurrentDateString.split(' ');
        var DateCurrentDate = new Date(CurrentDateStringSplit[0].split('/')[2], CurrentDateStringSplit[0].split('/')[1] - 1, CurrentDateStringSplit[0].split('/')[0]);
        var CurrentDate = DateCurrentDate.getTime();
        var TargetDate = Date.parse(document.getElementById('GoalDate').value);

        var NumberOfDays = (TargetDate - CurrentDate) / (1000 * 3600 * 24);
        var SpendPer = (SavingGoal - CurrentSavings) / NumberOfDays;

        return SpendPer.toFixed(2);
    }

    function UpdateGoalDate() {
        if (document.getElementById('txtSavingsGoal').value == '' || document.getElementById('txtCurrentBalance').value == '' || document.getElementById('txtRegularSavingValue').value == '') {

            document.getElementById('GoalDate').value = '';
            //console.log('Not all values Set');
        }
        else {
            //console.log('all values Set');
            var GoalCompleteDate = CalculateGoalDate();
            document.getElementById('GoalDate').value = GoalCompleteDate;
        }

    }

    function Period() {
        var SavingGoal = Number((document.getElementById('txtSavingsGoal').value).replace(/[^0-9.-]+/g, ""));
        var CurrentSavings = Number((document.getElementById('txtCurrentBalance').value).replace(/[^0-9.-]+/g, ""));
        var CurrentDateString = (document.getElementById('hdnServerDate').value);
        var CurrentDateStringSplit = CurrentDateString.split(' ');
        var DateCurrentDate = new Date(CurrentDateStringSplit[0].split('/')[2], CurrentDateStringSplit[0].split('/')[1] - 1, CurrentDateStringSplit[0].split('/')[0]);
        var CurrentDate = DateCurrentDate.getTime();
        var TargetDate = Date.parse(document.getElementById('GoalDate').value);
        //console.log(document.getElementById('GoalDate').value);

        var NumberOfDays = (TargetDate - CurrentDate) / (1000 * 3600 * 24);
        var SpendPer = (SavingGoal - CurrentSavings) / NumberOfDays;

        return SpendPer.toFixed(2);
    }

    function CheckDateFutureSavings() {
        var CurrentDateString = (document.getElementById('hdnServerDate').value);
        var CurrentDateStringSplit = CurrentDateString.split(' ');
        var DateCurrentDate = new Date(CurrentDateStringSplit[0].split('/')[2], CurrentDateStringSplit[0].split('/')[1] - 1, CurrentDateStringSplit[0].split('/')[0]);
        var CurrentDate = DateCurrentDate.getTime();
        var TargetDate = Date.parse(document.getElementById('GoalDate').value);

        console.log(CurrentDateString)
        console.log(CurrentDateStringSplit)
        console.log(DateCurrentDate)
        console.log(TargetDate)
        console.log(CurrentDate)

        var DateTargetDate = new Date(TargetDate)
        var year = DateTargetDate.getFullYear()

        if (!(year <= 9)) {
            if (CurrentDate > TargetDate) {
                document.getElementById('GoalDate').value = '';
                document.getElementById('valGoalDate').innerHTML = '<span id="GoalDate-error" style="font-size:8pt" class> * The Date must be in the future</span>'
            }
            else {
                document.getElementById('valGoalDate').innerHTML = ''
            }
        }
    }

    function CalculateGoalDate() {
        var SavingGoal = Number((document.getElementById('txtSavingsGoal').value).replace(/[^0-9.-]+/g, ""));
        var CurrentSavings = Number((document.getElementById('txtCurrentBalance').value).replace(/[^0-9.-]+/g, ""));
        if (document.getElementById('ddlSavingsPeriod').value == 'PerDay') {
            var DailySavingsAmount = Number((document.getElementById('txtRegularSavingValue').value).replace(/[^0-9.-]+/g, ""));
        }
        else if (document.getElementById('ddlSavingsPeriod').value == 'PerPayPeriod') {
            var DailySavingsAmount = Number((document.getElementById('txtRegularSavingValue').value).replace(/[^0-9.-]+/g, "")) / @Model.AproxDaysBetweenPay;
        }
        var CurrentDateString = (document.getElementById('hdnServerDate').value);
        var CurrentDateStringSplit = CurrentDateString.split(' ');
        var DateCurrentDate = new Date(CurrentDateStringSplit[0].split('/')[2], CurrentDateStringSplit[0].split('/')[1] - 1, CurrentDateStringSplit[0].split('/')[0]);
        var CurrentDate = DateCurrentDate.getTime();

        var NumberOfDays = (SavingGoal - CurrentSavings) / DailySavingsAmount;
        var NumberOfDaysTime = NumberOfDays * (1000 * 3600 * 24);
        //console.log(NumberOfDays);
        var GoalCompleteDate = new Date(CurrentDate + NumberOfDaysTime);

        var month = (GoalCompleteDate.getMonth() + 1)
        if (month < 10) {
            month = '0' + month
        }

        var day = GoalCompleteDate.getDate()
        if (day < 10) {
            day = '0' + day
        }

        var year = GoalCompleteDate.getFullYear()

        var Goal_date = year + "-" + month + "-" + day;

        return Goal_date;
    }

    function ClearSavingsInputs() {
        document.getElementById('txtSavingsGoal').value = '';
        document.getElementById('txtCurrentBalance').value = '';
        document.getElementById('GoalDate').value = '';
        document.getElementById('txtRegularSavingValue').value = '';
        document.getElementById('isAutoComplete').checked = false;
        document.getElementById('canExceedGoal').checked = false;
    }

    function HideValidationMessages() {
        const ValidationMessages = document.querySelectorAll('span.text-danger');
        ValidationMessages.forEach(ValMess => {
            ValMess.innerHTML = '';
        });
    }

    function UpdateHdnSavingAmount() {
        if (document.getElementById('ddlSavingsPeriod').value == 'PerDay') {
            var txtSavingsGoal = document.getElementById('txtRegularSavingValue').value;
            var numSavingsGoal = txtSavingsGoal.replace('£', '').replace(',', '');
            document.getElementById('RegularSavingValue').value = numSavingsGoal;
        }
        else if (document.getElementById('ddlSavingsPeriod').value == 'PerPayPeriod') {

            var txtSavingsGoal = document.getElementById('txtRegularSavingValue').value;
            var numSavingsGoal = txtSavingsGoal.replace('£', '').replace(',', '');
            document.getElementById('RegularSavingValue').value = numSavingsGoal;

        }
    }

</script>
